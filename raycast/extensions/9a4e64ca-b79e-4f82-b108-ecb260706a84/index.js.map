{
  "version": 3,
  "sources": ["../node_modules/sound-play/build/main.js", "../src/index.tsx"],
  "sourcesContent": ["module.exports=function(e){var r={};function t(n){if(r[n])return r[n].exports;var o=r[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,t),o.l=!0,o.exports}return t.m=e,t.c=r,t.d=function(e,r,n){t.o(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:n})},t.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},t.t=function(e,r){if(1&r&&(e=t(e)),8&r)return e;if(4&r&&\"object\"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(t.r(n),Object.defineProperty(n,\"default\",{enumerable:!0,value:e}),2&r&&\"string\"!=typeof e)for(var o in e)t.d(n,o,function(r){return e[r]}.bind(null,o));return n},t.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(r,\"a\",r),r},t.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},t.p=\"\",t(t.s=0)}([function(e,r,t){const{exec:n}=t(1),o=t(2).promisify(n);e.exports={play:async(e,r=.5)=>{const t=\"darwin\"===process.platform?Math.min(2,2*r):r,n=\"darwin\"===process.platform?((e,r)=>`afplay \"${e}\" -v ${r}`)(e,t):((e,r)=>`powershell -c Add-Type -AssemblyName presentationCore; $player = New-Object system.windows.media.mediaplayer; ${(e=>`$player.open('${e}');`)(e)} $player.Volume = ${r}; $player.Play(); Start-Sleep 1; Start-Sleep -s $player.NaturalDuration.TimeSpan.TotalSeconds;Exit;`)(e,t);try{await o(n)}catch(e){throw e}}}},function(e,r){e.exports=require(\"child_process\")},function(e,r){e.exports=require(\"util\")}]);", "import { List, LaunchProps, showToast, Toast, popToRoot, environment, ActionPanel, Action, Icon } from \"@raycast/api\";\nimport { useEffect, useRef, useState } from \"react\";\nimport sound from \"sound-play\";\n\nexport default function Command(props: LaunchProps) {\n  const { bpm, group = 1 } = props.arguments; // Set default value for group\n  const [taps, setTaps] = useState<number>(0);\n  const groupPositionRef = useRef<number>(1);\n  const [isRunning, setIsRunning] = useState(true); // Added state variable for metronome status\n\n  const handleStartStop = () => {\n    if (isRunning) {\n      stopMetronome();\n    } else {\n      startMetronome();\n    }\n  };\n\n  const stopMetronome = () => {\n    setIsRunning(false);\n    setTaps(0);\n    groupPositionRef.current = 1;\n  };\n\n  const startMetronome = () => {\n    setIsRunning(true);\n  };\n\n  useEffect(() => {\n    let timer: NodeJS.Timeout | null = null;\n    const interval = 60000 / Number(bpm);\n\n    function handleClick() {\n      if (groupPositionRef.current === 1) {\n        sound.play(environment.assetsPath + \"/sfx/\" + \"metronome-click.wav\");\n      } else {\n        sound.play(environment.assetsPath + \"/sfx/\" + \"metronome-click_lower.wav\");\n      }\n\n      if (groupPositionRef.current === Number(group)) {\n        groupPositionRef.current = 1;\n      } else {\n        groupPositionRef.current += 1;\n      }\n\n      setTaps((previousTaps) => previousTaps + 1);\n    }\n\n    if (isRunning) {\n      timer = setInterval(handleClick, interval);\n    }\n\n    return () => {\n      if (timer) {\n        clearInterval(timer);\n      }\n    };\n  }, [bpm, group, isRunning]);\n\n  if (\n    !isNaN(Number(bpm)) &&\n    Number(bpm) > 0 &&\n    Number(bpm) < 500 &&\n    !isNaN(Number(group) || 1) &&\n    Number(group || 1) > 0 &&\n    Number(group || 1) < 500\n  ) {\n    const description = isRunning ? \"Click \u21B5 to pause\" : \"Click \u21B5 to play\";\n\n    return (\n      <List searchBarPlaceholder=\"\" searchText=\"\">\n        <List.EmptyView\n          title={`BPM: ${bpm} | Accents: Per ${group || 1} ${group == 1 ? \"Click\" : \"Clicks\"} | Clicks: ${taps}`}\n          description={description}\n          icon={taps % 2 === 0 ? \"metronome-left.png\" : \"metronome-right.png\"}\n          actions={\n            <ActionPanel>\n              <Action\n                title={isRunning ? \"Pause\" : \"Play\"}\n                icon={isRunning ? Icon.Pause : Icon.Play}\n                onAction={handleStartStop}\n              />\n            </ActionPanel>\n          }\n        />\n      </List>\n    );\n  } else {\n    showToast({\n      style: Toast.Style.Failure,\n      title: \"Invalid Inputs\",\n      message: \"Inputs must be positive numbers below 500\",\n    });\n    popToRoot();\n    return null;\n  }\n}\n"],
  "mappings": "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",
  "names": ["require_main", "__commonJSMin", "exports", "module", "e", "n", "o", "r", "t", "index_exports", "__export", "Command", "__toCommonJS", "import_api", "import_react", "import_sound_play", "import_jsx_runtime", "props", "bpm", "group", "taps", "setTaps", "groupPositionRef", "isRunning", "setIsRunning", "handleStartStop", "stopMetronome", "startMetronome", "timer", "interval", "handleClick", "sound", "previousTaps", "description"]
}
